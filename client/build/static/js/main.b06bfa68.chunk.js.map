{"version":3,"sources":["base/header.js","base/content.js","router.js","pages/home.js","pages/base-data.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","float","fontSize","marginRight","height","mode","defaultSelectedKeys","Item","key","to","Content","props","paddingTop","children","routes","path","component","type","exact","Footer","RouteWithSubRoutes","route","render","App","className","position","zIndex","width","map","i","textAlign","padding","Boolean","window","location","hostname","match","ReactDOM","locale","zhCN","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAIe,SAASA,IACtB,OACE,kBAAC,WAAD,KACE,yBAAKC,MAAO,CAACC,MAAM,OAAOC,SAAS,OAAOC,YAAY,OAAOC,OAAO,SAApE,aAAwF,wCACxF,uBAAMC,KAAK,aAAaC,oBAAqB,CAAC,MAC5C,sBAAMC,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,6BAEF,sBAAMF,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,GAAG,cAAT,2CCXK,SAASC,EAAQC,GAI9B,OACE,yBAAKX,MAJM,CACXY,WAAY,SAITD,EAAME,U,8BCLN,IAAMC,EAAS,CACpB,CACEC,KAAM,IACNC,UCHG,WACL,OACE,6BACE,uBAAQC,KAAK,WAAb,YDCFC,OAAM,GAER,CACEH,KAAM,aACNC,UETG,WACL,OACE,4CCGIjB,E,IAAAA,OAAQoB,E,IAAAA,OAAQT,E,IAAAA,QAwBxB,SAASU,EAAmBC,GAC1B,OACE,kBAAC,IAAD,CACEH,MAAOG,EAAMH,MACbH,KAAMM,EAAMN,KACZO,OAAQ,SAACX,GAAD,OAEN,kBAACU,EAAML,UAAP,iBAAqBL,EAArB,CAA4BG,OAAQO,EAAMP,aAMnCS,MAnCf,WACE,OACE,kBAAC,IAAD,KACE,2BACE,kBAAC,EAAD,CAAQC,UAAU,SAASxB,MAAO,CAAEyB,SAAU,QAASC,OAAQ,EAAGC,MAAO,SACvE,kBAAC,EAAD,OAEF,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACGb,EAAOc,KAAI,SAACP,EAAOQ,GAAR,OACV,kBAACT,EAAD,eAAoBZ,IAAKa,EAAMN,MAAUM,UAKjD,kBAACF,EAAD,CAAQnB,MAAO,CAAE8B,UAAW,SAAUC,QAAQ,SAA9C,aCbYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCVNC,IAASf,OACP,uBAAgBgB,OAAQC,KACtB,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b06bfa68.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Menu } from \"antd\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <Fragment>\r\n      <div style={{float:'left',fontSize:'20px',marginRight:'20px',height:'64px'}} >SNAKE-API <small>mini</small></div>\r\n      <Menu mode=\"horizontal\" defaultSelectedKeys={[\"1\"]}>\r\n        <Menu.Item key=\"1\">\r\n          <Link to=\"/\">接口列表</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\">\r\n          <Link to=\"/base-data\">响应数据维护</Link>\r\n        </Menu.Item>\r\n      </Menu>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Content(props) {\r\n  const warp = {\r\n    paddingTop: '66px'\r\n  }\r\n  return (\r\n    <div style={warp}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import { Home } from \"./pages/home\";\r\nimport { BaseData } from \"./pages/base-data\";\r\n\r\nexport const routes = [\r\n  {\r\n    path: \"/\",\r\n    component: Home,\r\n    exact:true\r\n  },\r\n  {\r\n    path: \"/base-data\",\r\n    component: BaseData,\r\n    // routes: [\r\n    //   {\r\n    //     path: \"/tacos/bus\",\r\n    //     component: Bus\r\n    //   }\r\n    // ]\r\n  }\r\n];\r\n","import React from \"react\";\r\nimport { Button } from \"antd\";\r\n\r\nexport function Home() {\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\">Button</Button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport function BaseData() {\r\n  return (\r\n    <div>BaseData</div>\r\n  )\r\n}","import React from \"react\";\r\nimport SnakeHeader from \"./base/header\";\r\nimport SnakeContent from \"./base/content\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { routes } from \"./router\";\r\nimport { Layout } from \"antd\";\r\n\r\nconst { Header, Footer, Content } = Layout;\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Layout>\r\n        <Header className=\"header\" style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\r\n          <SnakeHeader />\r\n        </Header>\r\n        <Content>\r\n          <SnakeContent>\r\n            <Switch>\r\n              {routes.map((route, i) => (\r\n                <RouteWithSubRoutes key={route.path} {...route} />\r\n              ))}\r\n            </Switch>\r\n          </SnakeContent>\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center', padding:'10px' }}>Footer</Footer>\r\n      </Layout>\r\n    </Router>\r\n  );\r\n}\r\n\r\nfunction RouteWithSubRoutes(route) {\r\n  return (\r\n    <Route\r\n      exact={route.exact}\r\n      path={route.path}\r\n      render={(props) => (\r\n        // pass the sub-routes down to keep nesting\r\n        <route.component {...props} routes={route.routes} />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { ConfigProvider } from \"antd\";\r\nimport zhCN from \"antd/es/locale/zh_CN\";\r\n\r\nReactDOM.render(\r\n  <ConfigProvider locale={zhCN}>\r\n    <App />\r\n  </ConfigProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
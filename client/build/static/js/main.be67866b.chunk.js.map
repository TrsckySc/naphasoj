{"version":3,"sources":["pages/home.js","router.js","pages/base-data.js","pages/prefix.js","pages/project.js","pages/document.js","base/header.js","base/content.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","useForm","form","useState","forceUpdate","useEffect","name","layout","onFinish","values","onSearch","Item","placeholder","shouldUpdate","type","htmlType","HandleBtn","className","style","float","onClick","openDrawer","icon","PlusCircleOutlined","ImportOutlined","danger","DeleteOutlined","PageTable","Option","handleChange","value","option","onHandleTableRow","id","mockStatusList","label","columns","title","width","align","render","text","record","index","dataIndex","key","method","color","toUpperCase","CopyOutlined","defaultValue","isOpen","onChange","map","mockStatus","_id","isLock","size","LockOutlined","UnlockOutlined","EyeOutlined","EditOutlined","onConfirm","okText","cancelText","dataSource","rowKey","pagination","HandleInterface","tailLayout","wrapperCol","offset","span","labelCol","initialValues","remember","console","log","onFinishFailed","errorInfo","rules","required","message","routes","path","component","filter","setFilter","tableList","setTableList","drawer","setDrawer","getListData","url","page","param","rows","Axios","post","then","res","data","success","list","initSearch","table","Object","assign","error","errorMsg","placement","destroyOnClose","forceRender","onClose","visible","exact","withRouter","count","i","length","history","location","pathname","fontSize","marginRight","height","mode","defaultSelectedKeys","to","Content","padding","minHeight","children","Header","Footer","RouteWithSubRoutes","route","document","App","position","zIndex","textAlign","Boolean","window","hostname","match","ReactDOM","locale","zhCN","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.be67866b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Table,\r\n  Tag,\r\n  Select,\r\n  Space,\r\n  message,\r\n  Popconfirm,\r\n  Drawer,\r\n  Row,\r\n  Col,\r\n  Title,\r\n} from \"antd\";\r\nimport {\r\n  PlusCircleOutlined,\r\n  ImportOutlined,\r\n  DeleteOutlined,\r\n  EditOutlined,\r\n  EyeOutlined,\r\n  LockOutlined,\r\n  UnlockOutlined,\r\n  CopyOutlined,\r\n} from \"@ant-design/icons\";\r\nimport Axios from \"axios\";\r\n\r\nexport function Home() {\r\n  const [filter, setFilter] = useState({});\r\n\r\n  const [tableList, setTableList] = useState([]);\r\n\r\n  const [drawer, setDrawer] = useState(false);\r\n\r\n  const getListData = (name, url, page) => {\r\n    const param = {\r\n      name,\r\n      url,\r\n      page: 1,\r\n      rows: 20,\r\n    };\r\n    console.log(param);\r\n    Axios.post(\"/api/get-interface-list\", param).then((res) => {\r\n      if (res.data.success) {\r\n        setTableList(res.data.data.list);\r\n      } else {\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getListData(filter.name, filter.url, 1);\r\n  }, [filter]);\r\n\r\n  function handleTableRow(type, value, id) {\r\n    console.log(type, value, id);\r\n    if (type === \"changeMock\") {\r\n      Axios.post(\"/api/change-interface-mock-status\", {\r\n        id,\r\n        isOpen: value === \"open\",\r\n      }).then((res) => {\r\n        if (res.data.success) {\r\n          message.success(value === \"open\" ? \"成功启用\" : \"接口已停用\");\r\n          const table = tableList.map((data) => {\r\n            if (id === data._id) {\r\n              return Object.assign(data, {\r\n                isOpen: value === \"open\",\r\n              });\r\n            }\r\n            return data;\r\n          });\r\n          // 更改列表数据\r\n          setTableList(table);\r\n        } else {\r\n          message.error(res.data.errorMsg);\r\n        }\r\n      });\r\n    } else if (type === \"changeLock\") {\r\n      Axios.post(\"/api/change-interface-lock-status\", {\r\n        id,\r\n        isLock: value,\r\n      }).then((res) => {\r\n        if (res.data.success) {\r\n          message.success(\r\n            value ? \"接口已锁，将无法编辑与删除操作\" : \"接口已解锁\"\r\n          );\r\n          const table = tableList.map((data) => {\r\n            if (id === data._id) {\r\n              return Object.assign(data, {\r\n                isLock: value,\r\n              });\r\n            }\r\n            return data;\r\n          });\r\n          // 更改列表数据\r\n          setTableList(table);\r\n        } else {\r\n          message.error(res.data.errorMsg);\r\n        }\r\n      });\r\n    } else if (type === \"delete\") {\r\n      Axios.post(\"/api/delete-interface\", {\r\n        id,\r\n      }).then((res) => {\r\n        if (res.data.success) {\r\n          message.success(\"删除成功\");\r\n          // 重新查询数据\r\n          getListData(filter.name, filter.url, 1);\r\n        } else {\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Search\r\n        onSearch={(values) => {\r\n          setFilter(values);\r\n        }}\r\n      ></Search>\r\n      <HandleBtn\r\n        initSearch={() => {\r\n          getListData();\r\n        }}\r\n        openDrawer={() => {\r\n          setDrawer(true);\r\n        }}\r\n      ></HandleBtn>\r\n      <PageTable\r\n        dataSource={tableList}\r\n        onHandleTableRow={handleTableRow}\r\n      ></PageTable>\r\n\r\n      <Drawer\r\n        title=\"接口说明\"\r\n        placement=\"left\"\r\n        destroyOnClose={false}\r\n        forceRender={true}\r\n        onClose={() => setDrawer(false)}\r\n        visible={drawer}\r\n        width=\"80%\"\r\n      >\r\n        <HandleInterface></HandleInterface>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Search(props) {\r\n  const [form] = Form.useForm();\r\n  const [, forceUpdate] = useState();\r\n\r\n  // To disable submit button at the beginning.\r\n  useEffect(() => {\r\n    forceUpdate({});\r\n  }, []);\r\n\r\n  const onFinish = (values) => {\r\n    props.onSearch(values);\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      form={form}\r\n      name=\"horizontal_login\"\r\n      layout=\"inline\"\r\n      onFinish={onFinish}\r\n    >\r\n      <Form.Item name=\"name\">\r\n        <Input placeholder=\"请输入接口名称\" />\r\n      </Form.Item>\r\n      <Form.Item name=\"url\">\r\n        <Input placeholder=\"请输入接口地址\" />\r\n      </Form.Item>\r\n      <Form.Item shouldUpdate={true}>\r\n        {() => (\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            查 询\r\n          </Button>\r\n        )}\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n}\r\n\r\nfunction HandleBtn(props) {\r\n  return (\r\n    <div className=\"pt-20 pb-20 clearfix\">\r\n      <div style={{ float: \"left\" }}>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => props.openDrawer()}\r\n          icon={<PlusCircleOutlined />}\r\n        >\r\n          新建接口\r\n        </Button>\r\n        <Button type=\"dashed\" icon={<ImportOutlined />} className=\"ml-20\">\r\n          导入Swagger 接口\r\n        </Button>\r\n      </div>\r\n      <div style={{ float: \"right\" }}>\r\n        <Button danger icon={<DeleteOutlined />}>\r\n          清空当前所有接口\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction PageTable(props) {\r\n  const { Option } = Select;\r\n\r\n  function handleChange(value, option) {\r\n    props.onHandleTableRow(\"changeMock\", value, option.id);\r\n  }\r\n\r\n  const mockStatusList = [\r\n    {\r\n      value: \"open\",\r\n      label: \"启用中\",\r\n    },\r\n    {\r\n      value: \"close\",\r\n      label: \"停用中\",\r\n    },\r\n  ];\r\n\r\n  const columns = [\r\n    {\r\n      title: \"序号\",\r\n      width: 70,\r\n      align: \"center\",\r\n      render: (text, record, index) => `${index + 1}`,\r\n    },\r\n    {\r\n      title: \"接口名称\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n    },\r\n    {\r\n      title: \"接口类型\",\r\n      dataIndex: \"method\",\r\n      key: \"method\",\r\n      align: \"center\",\r\n      render: (method) => (\r\n        <Tag color={method === \"POST\" ? \"#52c41a\" : \"#1890ff\"}>\r\n          {method.toUpperCase()}\r\n        </Tag>\r\n      ),\r\n    },\r\n    {\r\n      title: \"接口前缀\",\r\n      dataIndex: \"prefix\",\r\n      key: \"prefix\",\r\n    },\r\n    {\r\n      title: \"接口地址\",\r\n      dataIndex: \"path\",\r\n      key: \"path\",\r\n      render: (text) => (\r\n        <>\r\n          <CopyOutlined className=\"pr-10\" />\r\n          <span>{text}</span>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Mock启用状态\",\r\n      dataIndex: \"isOpen\",\r\n      key: \"isOpen\",\r\n      width: 150,\r\n      align: \"center\",\r\n      render: (text, record, index) => (\r\n        <Select\r\n          defaultValue={record.isOpen ? \"open\" : \"close\"}\r\n          style={{\r\n            width: 100,\r\n            color: record.isOpen ? \"#52c41a\" : \"#ff4d4f\",\r\n          }}\r\n          onChange={handleChange}\r\n        >\r\n          {mockStatusList.map((mockStatus) => {\r\n            return (\r\n              <Option\r\n                value={mockStatus.value}\r\n                key={mockStatus.value}\r\n                id={record._id}\r\n              >\r\n                {mockStatus.label}\r\n              </Option>\r\n            );\r\n          })}\r\n        </Select>\r\n      ),\r\n    },\r\n    {\r\n      title: \"操作\",\r\n      width: 270,\r\n      align: \"center\",\r\n      render: (text, record, index) => (\r\n        <Space>\r\n          {record.isLock ? (\r\n            <>\r\n              <Button\r\n                type=\"link\"\r\n                size=\"small\"\r\n                onClick={() =>\r\n                  props.onHandleTableRow(\"changeLock\", false, record._id)\r\n                }\r\n                icon={<LockOutlined />}\r\n              />\r\n            </>\r\n          ) : (\r\n            <Button\r\n              type=\"link\"\r\n              size=\"small\"\r\n              onClick={() =>\r\n                props.onHandleTableRow(\"changeLock\", true, record._id)\r\n              }\r\n              icon={<UnlockOutlined />}\r\n            />\r\n          )}\r\n          <Button size=\"small\" type=\"primary\" icon={<EyeOutlined />}>\r\n            查看\r\n          </Button>\r\n          {!record.isLock ? (\r\n            <>\r\n              <Button size=\"small\" icon={<EditOutlined />}>\r\n                编辑\r\n              </Button>\r\n              <Popconfirm\r\n                title=\"您确定要删除该接口吗?\"\r\n                onConfirm={() => {\r\n                  props.onHandleTableRow(\"delete\", null, record._id);\r\n                }}\r\n                okText=\"确定\"\r\n                cancelText=\"不删了\"\r\n              >\r\n                <Button size=\"small\" danger icon={<DeleteOutlined />}>\r\n                  删除\r\n                </Button>\r\n              </Popconfirm>\r\n            </>\r\n          ) : null}\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Table\r\n      columns={columns}\r\n      dataSource={props.dataSource}\r\n      rowKey={(record) => record._id}\r\n      pagination={false}\r\n    />\r\n  );\r\n}\r\n\r\nfunction HandleInterface(props) {\r\n\r\n  const layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n  };\r\n  const tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n  };\r\n  \r\n  const onFinish = values => {\r\n    console.log('Success:', values);\r\n  };\r\n\r\n  const onFinishFailed = errorInfo => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      {/* 表单项 */}\r\n      <Col span={12}>\r\n        \r\n        <Form\r\n          {...layout}\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <div>\r\n            \r\n          </div>\r\n          <Form.Item\r\n            name=\"username\"\r\n            rules={[{ required: true, message: \"请输入接口名称!\" }]}\r\n          >\r\n            <h3>接口名称</h3>\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item {...tailLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Col>\r\n      {/* 代码编辑与预览 */}\r\n      <Col span={12}></Col>\r\n    </Row>\r\n  );\r\n}\r\n","import { Home } from \"./pages/home\";\r\nimport { BaseData } from \"./pages/base-data\";\r\nimport { Prefix } from \"./pages/prefix\";\r\nimport { Project } from \"./pages/project\";\r\nimport { Document } from \"./pages/document\";\r\n\r\nexport const routes = [\r\n  {\r\n    path: \"/\",\r\n    component: Home,\r\n    exact: true,\r\n    title: \"接口列表\"\r\n  },\r\n  {\r\n    path: \"/base-data\",\r\n    component: BaseData,\r\n    title: \"响应数据维护\"\r\n    // routes: [\r\n    //   {\r\n    //     path: \"/tacos/bus\",\r\n    //     component: Bus\r\n    //   }\r\n    // ]\r\n  },\r\n  {\r\n    path: \"/prefix\",\r\n    component: Prefix,\r\n    title: \"接口前缀维护\"\r\n  },\r\n  {\r\n    path: \"/project\",\r\n    component: Project,\r\n    title: \"项目配置维护\"\r\n  },\r\n  {\r\n    path: \"/document\",\r\n    component: Document,\r\n    title: \"文档说明\"\r\n  },\r\n];\r\n","import React from 'react';\r\n\r\nexport function BaseData() {\r\n  return (\r\n    <div>BaseData</div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport function Prefix() {\r\n  return (\r\n    <div>Prefix</div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport function Project() {\r\n  return (\r\n    <div>Project</div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport function Document() {\r\n  return (\r\n    <div>Document</div>\r\n  )\r\n}","import React, { Fragment } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { Menu } from \"antd\";\r\nimport { routes } from \"../router\";\r\n\r\nfunction Header(props) {\r\n  let count = '1';\r\n  for (let i = 0; i < routes.length; i++) {\r\n    if (routes[i].path === props.history.location.pathname) {\r\n      count = `${i + 1}`\r\n    }\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <div style={{ float: 'left', fontSize: '20px', marginRight: '20px', height: '64px' }} >SNAKE-API <small>mini</small></div>\r\n      <Menu mode=\"horizontal\" defaultSelectedKeys={[count]}>\r\n        <Menu.Item key=\"1\">\r\n          <Link to=\"/\">接口列表</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\">\r\n          <Link to=\"/base-data\">响应数据维护</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"3\">\r\n          <Link to=\"/prefix\">接口前缀维护</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"4\">\r\n          <Link to=\"/project\">项目配置维护</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"5\">\r\n          <Link to=\"/document\">文档说明</Link>\r\n        </Menu.Item>\r\n      </Menu>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default withRouter(Header);\r\n","import React from \"react\";\r\nimport { Breadcrumb } from \"antd\";\r\n\r\nexport default function Content(props) {\r\n  const warp = {\r\n    padding: \"66px 20px 0 20px\",\r\n    minHeight: \"calc(100vh - 42px)\",\r\n  };\r\n  return (\r\n    <div style={warp}>\r\n      <Breadcrumb style={{ padding: \"10px 0\" }}>\r\n        <Breadcrumb.Item>接口列表</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport SnakeHeader from \"./base/header\";\r\nimport SnakeContent from \"./base/content\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { routes } from \"./router\";\r\nimport { Layout } from \"antd\";\r\n\r\nconst { Header, Footer, Content } = Layout;\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Layout>\r\n        <Header\r\n          className=\"header\"\r\n          style={{\r\n            position: \"fixed\",\r\n            zIndex: 1,\r\n            width: \"100%\",\r\n            padding: \"0 20px\",\r\n          }}\r\n        >\r\n          <SnakeHeader />\r\n        </Header>\r\n        <Content>\r\n          <SnakeContent>\r\n            <Switch>\r\n              {routes.map((route, i) => (\r\n                <RouteWithSubRoutes key={route.path} {...route} />\r\n              ))}\r\n            </Switch>\r\n          </SnakeContent>\r\n        </Content>\r\n        <Footer style={{ textAlign: \"center\", padding: \"10px\" }}>\r\n          技术支持：seebin | 钉钉交流群:21958681\r\n        </Footer>\r\n      </Layout>\r\n    </Router>\r\n  );\r\n}\r\n\r\nfunction RouteWithSubRoutes(route) {\r\n  document.title = route.title;\r\n  return (\r\n    <Route\r\n      exact={route.exact}\r\n      path={route.path}\r\n      render={(props) => (\r\n        // pass the sub-routes down to keep nesting\r\n        <route.component {...props} routes={route.routes} />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { ConfigProvider } from \"antd\";\r\nimport zhCN from \"antd/es/locale/zh_CN\";\r\n\r\nReactDOM.render(\r\n  <ConfigProvider locale={zhCN}>\r\n    <App />\r\n  </ConfigProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}